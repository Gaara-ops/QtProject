#include <stdio.h>
#include <string.h>
#include <GL/glew.h>
#include <GL/freeglut.h>
#include <string>
#include <fstream>
#include <iostream>
#include <ostream>
#include <sstream>
#include <math.h>
#include <QImage>
# include <glm/glm.hpp>
# include <glm/gtc/matrix_transform.hpp>
# include <glm/gtc/type_ptr.hpp>
using namespace std;

GLuint  compute_prog;
GLuint  compute_shader;
GLuint  render_prog;
GLuint  render_vbo;
GLuint m_textureObj;
int texture_width = 800;
int texture_height = 400;
bool ReadFile(const char* pFileName, string& outFile)
{
    ifstream f(pFileName);
    bool ret = false;

    if (f.is_open()) {
        string line;
        while (getline(f, line)) {
            outFile.append(line);
            outFile.append("\n");
        }

        f.close();

        ret = true;
    }
    else {
        printf("read file error!");
    }

    return ret;
}
// 使用shader文本编译shader对象，并绑定shader都想到着色器程序中
static void AddShader(GLuint ShaderProgram, const char* pShaderText, GLenum ShaderType)
{
    //创建shader着色器对象
    GLuint ShaderObj = glCreateShader(ShaderType);

    if (ShaderObj == 0) {
        fprintf(stderr, "Error creating shader type %d\n", ShaderType);
        exit(0);
    }

    //在编译shader对象之前我们必须先定义它的代码源
    const GLchar* p[1];
    p[0] = pShaderText;
    GLint Lengths[1];
    Lengths[0]= strlen(pShaderText);
    glShaderSource(ShaderObj, 1, p, Lengths);

    //编译shader对象
    glCompileShader(ShaderObj);

    //获得编译状态，并且可以打印编译器碰到的所有编译错误
    GLint success;
    glGetShaderiv(ShaderObj, GL_COMPILE_STATUS, &success);
    if (!success) {
        GLchar InfoLog[1024];
        glGetShaderInfoLog(ShaderObj, 1024, NULL, InfoLog);
        fprintf(stderr, "Error compiling shader type %d: '%s'\n", ShaderType, InfoLog);
        exit(1);
    }
    //将编译好的shader对象绑定在program object程序对象上
    glAttachShader(ShaderProgram, ShaderObj);
}
static void RenderSceneCB()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glUseProgram(compute_prog);
    glBindImageTexture(0, m_textureObj, 0, GL_FALSE, 0, GL_WRITE_ONLY, GL_RGBA32F);
    glUniform2f(glGetUniformLocation(compute_prog, "uSize"), texture_width, texture_height);
    glUniform3fv(glGetUniformLocation(compute_prog, "uCamera.origin"), 1, glm::value_ptr( glm::vec3(0.0f, 0.0f, 0.0f)));
    glUniform3fv(glGetUniformLocation(compute_prog, "uCamera.lower_left_corner"), 1, glm::value_ptr( glm::vec3(-2.0f, -1.0f, -1.0f)));
    glUniform3fv(glGetUniformLocation(compute_prog, "uCamera.horizontal"), 1, glm::value_ptr( glm::vec3(4.0f, 0.0f, 0.0f)));
    glUniform3fv(glGetUniformLocation(compute_prog, "uCamera.vertical"), 1, glm::value_ptr( glm::vec3(0.0f, 2.0f, 0.0f)));

    glUniform1f(glGetUniformLocation(compute_prog, "uNbObjects"), 4);
    std::ostringstream os1;
    os1 << "uObjects[0]";
    glUniform3fv(glGetUniformLocation(compute_prog, os1.str().append(".pos").c_str()), 1, glm::value_ptr(glm::vec3(0.0f, 0.0f, -1.0f)));
    glUniform1f(glGetUniformLocation(compute_prog, os1.str().append(".radius").c_str()), 0.5f);
    glUniform3fv(glGetUniformLocation(compute_prog, os1.str().append(".albedo").c_str()), 1, glm::value_ptr(glm::vec3(0.8f, 0.3f, 0.3f)));
    glUniform1f(glGetUniformLocation(compute_prog, os1.str().append(".fuzz").c_str()), 0.0f);
    glUniform1i(glGetUniformLocation(compute_prog, os1.str().append(".type").c_str()), 1);
    std::ostringstream os2;
    os2 << "uObjects[1]";
    glUniform3fv(glGetUniformLocation(compute_prog, os2.str().append(".pos").c_str()), 1, glm::value_ptr(glm::vec3(0.0f, -100.5f, -1.0f)));
    glUniform1f(glGetUniformLocation(compute_prog, os2.str().append(".radius").c_str()), 100.0f);
    glUniform3fv(glGetUniformLocation(compute_prog, os2.str().append(".albedo").c_str()), 1, glm::value_ptr(glm::vec3(0.8f, 0.8f, 0.0f)));
    glUniform1f(glGetUniformLocation(compute_prog, os2.str().append(".fuzz").c_str()), 0.0f);
    glUniform1i(glGetUniformLocation(compute_prog, os2.str().append(".type").c_str()), 1);
    std::ostringstream os3;
    os3 << "uObjects[2]";
    glUniform3fv(glGetUniformLocation(compute_prog, os3.str().append(".pos").c_str()), 1, glm::value_ptr(glm::vec3(1.0f, 0.0f, -1.0f)));
    glUniform1f(glGetUniformLocation(compute_prog, os3.str().append(".radius").c_str()), 0.5f);
    glUniform3fv(glGetUniformLocation(compute_prog, os3.str().append(".albedo").c_str()), 1, glm::value_ptr(glm::vec3(0.8f, 0.6f, 0.2f)));
    glUniform1f(glGetUniformLocation(compute_prog, os3.str().append(".fuzz").c_str()), 0.1f);
    glUniform1i(glGetUniformLocation(compute_prog, os3.str().append(".type").c_str()), 2);
    std::ostringstream os4;
    os4 << "uObjects[3]";
    glUniform3fv(glGetUniformLocation(compute_prog, os4.str().append(".pos").c_str()), 1, glm::value_ptr(glm::vec3(-1.0f, 0.0f, -1.0f)));
    glUniform1f(glGetUniformLocation(compute_prog, os4.str().append(".radius").c_str()), 0.5f);
    glUniform3fv(glGetUniformLocation(compute_prog, os4.str().append(".albedo").c_str()), 1, glm::value_ptr(glm::vec3(0.8f, 0.8f, 0.8f)));
    glUniform1f(glGetUniformLocation(compute_prog, os4.str().append(".fuzz").c_str()), 0.1f);
    glUniform1i(glGetUniformLocation(compute_prog, os4.str().append(".type").c_str()), 2);

    glDispatchCompute(texture_width, texture_height, 1);
    glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);


    glUseProgram(render_prog);
    glEnableVertexAttribArray(0);//开启顶点属性
    glEnableVertexAttribArray(1);//开启顶点属性

    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, m_textureObj);//绑定纹理

    // 告诉管线怎样解析bufer中的数据
    glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 4 * sizeof(float), 0);
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 4 * sizeof(float), (void *)(2 * sizeof(float)));
    glDrawArrays(GL_TRIANGLES, 0, 6);
    glDisableVertexAttribArray(0);//禁用顶点数据
    glDisableVertexAttribArray(1);//禁用顶点数据
    glutSwapBuffers();
}


static void InitializeGlutCallbacks()
{
    glutDisplayFunc(RenderSceneCB);
    glutIdleFunc(RenderSceneCB);
}

bool LoadTexture()
{
//    QString filename ="F:/opengl/ogldev-source/Content/test.png";
//    QImage m_image;
//    m_image.load(filename);

    glGenTextures(1, &m_textureObj);//生成纹理队形
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, m_textureObj);//绑定对象
//    //指定一个二维纹理图像
//    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, m_image.width(), m_image.height(),
//                 0, GL_RGBA, GL_UNSIGNED_BYTE, m_image.bits());
    //放大和缩小指定过滤方式
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    //纹理环绕方式
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA32F, texture_width, texture_height, 0, GL_RGBA, GL_FLOAT, NULL);
    glBindImageTexture(0, m_textureObj, 0, GL_FALSE, 0, GL_WRITE_ONLY, GL_RGBA32F);

    return true;
}

static void InitData(){
    string s;//存储着色器文本的字符串缓冲
    const char* computer_cs = "shaders/hitsphere.cs";
    if (!ReadFile(computer_cs, s)) {
        return;
    }

    compute_prog = glCreateProgram();
    AddShader(compute_prog, s.c_str(), GL_COMPUTE_SHADER);
    glLinkProgram(compute_prog);

    render_prog = glCreateProgram();

    static const char render_vs[] =
        "#version 430 core\n"
        "\n"
        "layout (location = 0) in vec2 aPosition;\n"
        "layout (location = 1) in vec2 aTexCoord;\n"
        "out vec2    texCoord;\n"
        "\n"
        "void main(void)\n"
        "{\n"
        "    vec4 pos = vec4(aPosition, 1.0F, 1.0F);\n"
        "    gl_Position = pos;\n"
        "    texCoord = aTexCoord;\n"
        "}\n";

    static const char render_fs[] =
        "#version 430 core\n"
        "\n"
        "layout (location = 0) out vec4 color;\n"
        "\n"
        "in vec2        texCoord;\n"
        "uniform sampler2D output_image;\n"
        "\n"
        "void main(void)\n"
        "{\n"
        "    color = texture(output_image, texCoord);\n"
        "}\n";

    AddShader(render_prog, render_vs, GL_VERTEX_SHADER);
    AddShader(render_prog, render_fs, GL_FRAGMENT_SHADER);
    glLinkProgram(render_prog);

    glGenBuffers(1, &render_vbo);
    glBindBuffer(GL_ARRAY_BUFFER, render_vbo);
    static const float verts[] =
    {
        -1.f, -1.f,
        0.f, 1.f,
        -1.f, 1.f,
        0.f, 0.f,
        1.f, -1.f,
        1.f, 1.f,
        -1.f, 1.f,
        0.f, 0.f,
        1.f, -1.f,
        1.f, 1.f,
        1.f, 1.f,
        1.f, 0.f
    };
    glBufferData(GL_ARRAY_BUFFER, sizeof(verts), verts, GL_STATIC_DRAW);

    LoadTexture();
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB);
    glutInitWindowSize(800, 400);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("opengl learn");

    InitializeGlutCallbacks();

    // Must be done after glut is initialized!
    GLenum res = glewInit();
    if (res != GLEW_OK) {
      fprintf(stderr, "Error: '%s'\n", glewGetErrorString(res));
      return 1;
    }

    printf("GL version: %s\n", glGetString(GL_VERSION));

    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
    InitData();

    glutMainLoop();

    return 0;
}



/** hitsphere.cs代码
#version 430

layout (local_size_x = 1, local_size_y = 1) in;

layout (rgba32f, binding = 0) uniform image2D destTex;

struct      Camera {
    vec3    origin;
    vec3    lower_left_corner;
    vec3    horizontal;
    vec3    vertical;
};

struct ray {
    vec3    origin;
    vec3    direction;
};

struct      Object {
    vec3    pos;
    float   radius;
    vec3 albedo;//反射率
    float fuzz;//模糊
    int type;
};

//撞击点信息
struct hit_record
{
	//射线参数t
    float t;  
	//撞击点位置向量p
    vec3 p;
	//撞击点位置向量N
    vec3 normal; 
    bool hit;
};

struct material_info {
    vec3 attenuation;
    ray scattered;
    bool res;
};



uniform Camera  uCamera;

uniform vec2    uSize;

uniform float   uNbObjects;
uniform Object  uObjects[20];

float random2 (vec2 st) {
    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);
}

int next = 1;
int random(void)  /* RAND_MAX assumed to be 32767. */
{
    next = abs(next * 1103515245 + 12345);
    int tmp = next/65536;
    return tmp % 32768;
}

void mysrand(int seed)
{
    next = seed;
}

vec3 random_in_unit_sphere() {
    vec3 p;
    do {
        //p = 2.0*vec3(drand48(),drand48(),drand48()) - vec3(1,1,1);
		p = 2.0f * vec3((random() % 100 / float(100)), (random() % 100 / float(100)), (random() % 100 / float(100))) - vec3(1.0f, 1.0f, 1.0f);
    } while (dot(p,p) >= 1.0);
    return p;
}

material_info scatter(ray r_in,hit_record rec,Object obj){
    material_info minfo;
    if(obj.type == 1){
        vec3 target = rec.p + rec.normal + random_in_unit_sphere();
        ray tmp;
        tmp.origin = rec.p;
        tmp.direction = target-rec.p;
        minfo.scattered = tmp;
        minfo.attenuation = obj.albedo;
        minfo.res = true;
    }else if(obj.type == 2){
        vec3 reflected = reflect(normalize(r_in.direction), rec.normal);
        ray tmp;
        tmp.origin = rec.p;
        tmp.direction = reflected + obj.fuzz*random_in_unit_sphere();
        minfo.scattered = tmp;
        minfo.attenuation = obj.albedo;
        if(dot(tmp.direction, rec.normal) > 0){
            minfo.res = true;
        }else{
            minfo.res = false;
        }
    }else{
        minfo.res = false;
    }
    return minfo;
}

hit_record hit_sphere( vec3 center, float radius, ray r)
{
	vec3 oc = r.origin - center;
	float a = dot(r.direction, r.direction);
	float b = 2.0f*dot(oc, r.direction);
	float c = dot(oc, oc) - radius*radius;
	float discriminant = b*b - 4.0f*a*c;
    hit_record hitinfo;
    if (discriminant > 0) {
        float temp = (-b - sqrt(discriminant))/(2*a);
        if (temp > 0) {
            hitinfo.hit = true;
            hitinfo.t = temp;
            hitinfo.p = r.origin + temp*r.direction;
            hitinfo.normal = (hitinfo.p - center) / radius;
            return hitinfo;
        }
        temp = (-b + sqrt(discriminant)) /(2*a);
        if (temp > 0) {
            hitinfo.hit = true;
            hitinfo.t = temp;
            hitinfo.p = r.origin + temp*r.direction;
            hitinfo.normal = (hitinfo.p - center) / radius;
            return hitinfo;
        }
    }
    hitinfo.hit = false;
    return hitinfo;
}

float GetColor2(int num){
    if(num>0){
        return GetColor2(num--);
    }
    return 0.5;
}

struct Result {
    float   dist;
    vec3    impact;
    vec3    normal;
    vec3    reflect;
    vec3    color;
    int     idx;
};

Result GetColor(ray r,int exclude){
    Result  result;
    for(int i=0;i<uNbObjects;i++){
        if(i == exclude){
            continue;
        }
        hit_record hitinfo = hit_sphere(uObjects[i].pos,uObjects[i].radius,r);
        if(hitinfo.hit){
            //return 0.5f*vec3(hitinfo.normal.x + 1.0f, hitinfo.normal.y + 1.0f, hitinfo.normal.z + 1.0f);
            material_info minfo = scatter(r,hitinfo,uObjects[i]);
            if(minfo.res){
                result.idx = i;
                result.impact = minfo.scattered.origin;
                result.reflect = minfo.scattered.direction;
            }else{
                result.idx = -1;
            }
            result.color = minfo.attenuation;
            return result;
        }
    }

	vec3 unit_direction = normalize(r.direction);
	float t = 0.5f*(unit_direction.y + 1.0f);
	result.color = (1.0f - t)*vec3(1.0f, 1.0f, 1.0f) + t*vec3(0.5f, 0.7f, 1.0f);
    result.idx = -1;
    return result;
}

void        main() {
    ivec2   pos = ivec2(gl_GlobalInvocationID.xy);
    vec2    fpos = vec2(pos.xy);
    
    float u = float(fpos.x) / float(uSize.x);
    float v = float(uSize.y-1-fpos.y) / float(uSize.y);
    
    ray r;
    r.origin = uCamera.origin;
    r.direction = uCamera.lower_left_corner + u*uCamera.horizontal + v*uCamera.vertical;
    
    Result    result = GetColor(r,-1);
    vec3 colortmp = result.color;
    int reflectDepth = 20;
    while(result.idx != -1 && reflectDepth>0){
        reflectDepth -= 1;
        ray tmp;
        tmp.origin = result.impact;
        tmp.direction = result.reflect;
        result = GetColor(tmp,result.idx);
        colortmp *= result.color;
    }
    
    vec4    color = vec4(colortmp,1.0f);
    imageStore(destTex, pos, color);
}

 */